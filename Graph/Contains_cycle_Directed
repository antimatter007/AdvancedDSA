#include <bits/stdc++.h>
using namespace std;

#define MEM(a, b) memset(a, (b), sizeof(a))
#define FOR(i, j, k, in) for (int i=j ; i<k ; i+=in)
#define RFOR(i, j, k, in) for (int i=j ; i>=k ; i-=in)
#define REP(i, j) FOR(i, 0, j, 1)
#define RREP(i, j) RFOR(i, j, 0, 1)
#define rall(cont) cont.end(), cont.begin()
#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)
#define IN(A, B, C) assert( B <= A && A <= C)
#define MP make_pair

#define F               first
#define S               second
#define IN_REP          int tt; cin >> tt; while(tt--)

const double pi=acos(-1.0);
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using vi = vector<int>;
using vb = vector<bool>;
using vvi = vector<vi>;
using vll = vector<ll>;
using vvll = vector<vll>;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vpii = vector<pii>;
using vpll = vector<pll>;


#define pb push_back
#define fr(a,b) for(int i = a; i < b; i++)
#define rep(i,a,b) for(int i = a; i < b; i++)
#define mod 1000000007
#define inf (1LL<<60)
#define all(x) (x).begin(), (x).end()
#define prDouble(x) cout << fixed << setprecision(10) << x
#define triplet pair<ll,pair<ll,ll>>
#define goog(tno) cout << "Case #" << tno <<": "
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)
#define read(x) int x; cin >> x

#define um unoredered_map<int, int> 
#define pqmax priority_queue<int> 
#define pqmin priority_queue<int , vi, greater<int>>
 
void init_code(){
    fast_io;
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif 
}


//-------------------------------------------------------------------

//Graph Implementation - Adjacency list and adjacency matrix
//Connected Components 

class Graph{
	int V;
	list<int> *l;
public:
	Graph(int V){
		this->V=V;
		l=new list<int> [V];
	}

	void addedge(int V1, int V2, bool directed){
		l[V1].push_back(V2);
		// l[V2].push_back(V1
		if(!directed){
			l[V2].push_back(V1);			
		}
	
	}

	void PrintList(){
		//iterate over all the vertices
		for(int i=0;i<V;i++){
			cout<< "vertex "<< i<<"-> ";
			for(int ngr: l[i]){
				cout<<ngr<<" ";
			}
			cout<<endl;		
		}

	}

	bool cycle_helper(int node, bool *vis, bool *stack){
		//Check cycle in a DirectedGraph
		vis[node]= true;
		stack[node]= true;

		for(int nbr: l[node]){


			if(stack[nbr]){
				return true;
			}

			if(vis[nbr]==false){
				bool cycle_mila= cycle_helper(nbr, vis, stack);
				if(cycle_mila==true){
					return true;
				}
			}
		}
		//leave the node

		stack[node]= false;
		return false;
	}

	bool contains_cycle(){


		bool *vis= new bool[V];
		bool *stack= new bool[V];

		rep(i,0,V){
			vis[i]=stack[i]=false;
		}
		return cycle_helper(0, vis, stack);
	}
};


int main(){
	init_code();
	
	Graph g(7);

	g.addedge(0,1,true);
	g.addedge(1,2,true);
	g.addedge(2,3,true);
	g.addedge(3,4,true);
	g.addedge(4,5,true);
	g.addedge(5,2,true);
	g.addedge(5,6,true);
	g.PrintList();
	if(g.contains_cycle()){
		cout<<"contains cycle"<<endl;
	}else
	cout<<"does not contain cycle";
    return 0;
};
