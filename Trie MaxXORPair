 
#include <bits/stdc++.h>

using namespace std;

#define MEM(a, b) memset(a, (b), sizeof(a))
#define FOR(i, j, k, in) for (int i=j ; i<k ; i+=in)
#define RFOR(i, j, k, in) for (int i=j ; i>=k ; i-=in)
#define REP(i, j) FOR(i, 0, j, 1)
#define RREP(i, j) RFOR(i, j, 0, 1)
#define rall(cont) cont.end(), cont.begin()
#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)
#define IN(A, B, C) assert( B <= A && A <= C)
#define MP make_pair

#define F               first
#define S               second
#define IN_REP          int tt; cin >> tt; while(tt--)

const double pi=acos(-1.0);
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using vi = vector<int>;
using vb = vector<bool>;
using vvi = vector<vi>;
using vll = vector<ll>;
using vvll = vector<vll>;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vpii = vector<pii>;
using vpll = vector<pll>;


#define pb push_back
#define fr(a,b) for(int i = a; i < b; i++)
#define rep(i,a,b) for(int i = a; i < b; i++)
#define mod 1000000007
#define inf (1LL<<60)
#define all(x) (x).begin(), (x).end()
#define prDouble(x) cout << fixed << setprecision(10) << x
#define triplet pair<ll,pair<ll,ll>>
#define goog(tno) cout << "Case #" << tno <<": "
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)
#define read(x) int x; cin >> x

 
void init_code(){
    fast_io;
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif 
}











//Construction of Trie
class trienode{
public:
	trienode* left;
	trienode* right;
};


//Inserting a node in Trie- Right side is 1 and left side is 0
void insert(int n, trienode* head){

	trienode* curr=head;
	for(int i=31;i>=0;i++){
		int b=(n>>i)&1; //this is either 0 or 1
		if(!(n>>i)&1){ //if the ith bit is 0
			if(!curr->left){
				curr->left=new trienode();
			}
			curr=curr->left;
		}
	else {				//if the ith bit is 1
			if(!curr->right){
				curr->right=new trienode();
			}
			curr=curr->right;
		}

	}
}



int findMaxXorPair(trienode* head, int *arr, int n){
	int max_xor=INT_MIN;
	rep(i, 0, n){
		int value = arr[i];
		trienode* curr= head;
		int curr_xor=0;
		for(int j=31;j>=0;j--){
			int b= (value>>j)&1;

			if(b==0){
				if(curr->right){
					curr_xor+= pow(2,j);
					curr=curr->right;
				}
			else{

				curr= curr->left;
			}
		}else{
			if(curr->left){
				curr_xor+= pow(2,j);
				curr=curr->left;
			}else{
				curr=curr->right;
			}
		}
		if(curr_xor>max_xor)
			max_xor=curr_xor;
	}
}
	return max_xor;
}



int main() {
   init_code();
         
   int arr[6]= {8,1,2,15,10,5};
   trienode* head= new trienode();
   for(int i=0;i<6;i++){
   	insert(arr[i], head);
   }

   cout<<findMaxXorPair(head,arr,6);

   return 0;
}
