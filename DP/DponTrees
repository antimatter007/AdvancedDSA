#include <bits/stdc++.h>
using namespace std;

#define MEM(a, b) memset(a, (b), sizeof(a))
#define FOR(i, j, k, in) for (int i=j ; i<k ; i+=in)
#define RFOR(i, j, k, in) for (int i=j ; i>=k ; i-=in)
#define REP(i, j) FOR(i, 0, j, 1)
#define RREP(i, j) RFOR(i, j, 0, 1)
#define rall(cont) cont.end(), cont.begin()
#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)
#define IN(A, B, C) assert( B <= A && A <= C)
#define MP make_pair

#define F               first
#define S               second
#define IN_REP          int tt; cin >> tt; while(tt--)

const double pi=acos(-1.0);
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using vi = vector<int>;
using vb = vector<bool>;
using vvi = vector<vi>;
using vll = vector<ll>;
using vvll = vector<vll>;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vpii = vector<pii>;
using vpll = vector<pll>;


#define pb push_back
#define fr(a,b) for(int i = a; i < b; i++)
#define rep(i,a,b) for(int i = a; i < b; i++)
#define mod 1000000007
#define inf (1LL<<60)
#define all(x) (x).begin(), (x).end()
#define prDouble(x) cout << fixed << setprecision(10) << x
#define triplet pair<ll,pair<ll,ll>>
#define goog(tno) cout << "Case #" << tno <<": "
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)
#define read(x) int x; cin >> x


vector<int> sieve_less_than(int n){
	vector<int> p(1000000);
	vector<int> ans;

	FOR(i, 3 , n, 2){
		p[i]=1;
	}
	//Sieve
	FOR(i, 3, n, 2){
		if(p[i]==1){
			FOR(j, i*i, n, i){
				p[j]=0;
			}
		}
	}
	p[2]=1;
	p[1]=p[0]=0;
	rep(i, 0,p.size()){
		if(p[i]==1)
		ans.pb(i);
	}
	return ans;
}

vector<int> sieve_firstn(int n){
	vector<int> p(1000000);
	vector<int> ans;

	FOR(i, 3 , 1000000, 2){
		p[i]=1;
	}
	//Sieve
	FOR(i, 3, 1000000, 2){
		if(p[i]==1){
			FOR(j, i*i, 1000000, i){
				p[j]=0;
			}
		}
	}
	p[2]=1;
	p[1]=p[0]=0;
	int count =n;
	rep(i, 0,p.size()){
		if(p[i]==1 and count){
		ans.pb(i);
		count--;}
		else
			break;
	}
	return ans;
}





void init_code(){
    fast_io;
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif 
}



//---------------------------------------------------------
//Dp on Trees - Family Tree
const int N= 1e5;
ll ans = 0, n;
vector<vector<ll>> al(N);
ll W[N], P[N];
ll ma[N], mi[N];

void dfs(ll i, ll par){
	for(auto it: al[i]){
		if(it!= par){
			dfs(it, i);
			ma[i] = max(ma[i], ma[it]);
			mi[i] = min(mi[i], mi[it]);
		}
	}
	ma[i] = max(ma[i], W[i]);
	mi[i] = min(mi[i], W[i]);
	ans= max(ans, abs(W[i]- ma[i]));
	ans= max(ans, abs(W[i]- mi[i]));


}



int32_t main(){
	init_code();

	cin>>n;
	rep(i, 1,n+1){
		ma[i] = INT_MIN;
		mi[i] = INT_MAX;
	}
	ll root = 0;
	rep(i, 1, n+1){
		cin>>W[i];
	}

	rep(i, 1,n+1 ){
		cin>>P[i];
		if(P[i]== -1)
			root =i;
		else
			al[P[i]].pb(i);
	}

	dfs(root, 0)
	cout<< ans;
    return 0;
}
